@model CreateCharacterViewModel
@inject IDBHelper DBHelper

@{
    ViewData["Title"] = "Create a Character";
}

<h1>Create a Character</h1>

<hr />
<div >
    <div >
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
				<label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" value="Unnamed Character" />
				<span asp-validation-for="Name" class="text-danger"></span>
            </div>
            @*
                In order to have multiple accordions on the same page,
                each accordion must have a unique id.

                The id of the accordion is used as the data-bs-parent
                attribute of the accordion-body div.

                Id naming convention: accordion section + property name
                i.e. accordionClasses, headingClasses, collapseClasses
            *@

            @* Accordion for Class selection *@
            <div class="form-group accordion" id="accordionClasses">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingClasses">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseClasses" aria-expanded="true" aria-controls="collapseOne">
                            Classes
                        </button>
                    </h2>
                    <div id="collapseClasses" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <input asp-for="AvailableClasses" type="hidden" value="@Model.AvailableClasses" />
                            <div id="selectClasses">
                                <div id="Class0">
                                    <label asp-for="@Model.Classes[0][2]" >Level</label>
                                    <input asp-for="@Model.Classes[0][2]" class="w-auto" max="20" min="0" value="1" />
                                    <select asp-for="@Model.Classes[0][0]">
                                        @foreach(Class characterClass in Model.AvailableClasses)
								        {
									        <option value="@characterClass.ClassId">@characterClass.Name</option>
								        }
                                    </select>
                                    <input hidden asp-for="@Model.Classes[0][1]" value="0" />
                                </div>
                                @for (int i = 1; i < Model.AvailableClasses.Count; i++)
                                {
                                    string classId = "Class" + i;
                                    <div hidden id="@classId">
                                        <label asp-for="@Model.Classes[i][2]">Level</label>
                                        <input asp-for="@Model.Classes[i][2]" class="w-auto" max="20" min="0" value="0" />
                                        <select asp-for="@Model.Classes[i][0]">
                                            @foreach (Class characterClass in Model.AvailableClasses)
                                            {
                                                <option value="@characterClass.ClassId">@characterClass.Name</option>
                                            }
                                        </select>
                                        <input hidden asp-for="@Model.Classes[i][1]" value="0" />
                                    </div>
                                }
                            </div>
                            <button id="addClass" type="button" class="btn btn-primary" onclick="addClassSelector()">Add Class</button>
                        </div>
                    </div>
                </div>
            </div>

            @* Accordion for Background selection *@
            <div class="form-group accordion" id="accordionBackground">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingBackground">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseBackground" aria-expanded="true" aria-controls="collapseOne">
                            Background
                        </button>
                    </h2>
                    <div id="collapseBackground" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <input asp-for="AvailableBackgrounds" type="hidden" value="@Model.AvailableBackgrounds" />
                            <select asp-for="BackgroundId" onchange="updateBackgroundDescription()">
                                @foreach(Background characterBackground in Model.AvailableBackgrounds)
                                {
                                    <option value="@characterBackground.BackgroundId">@characterBackground.Name (@characterBackground.Sourcebook)</option>
                                }
                            </select>
                            <p id="descriptionBackground">@Model.AvailableBackgrounds[Model.BackgroundId].Description</p>
                        </div>
                    </div>
                </div>
            </div>
            @* Accordion for Race selection *@
            <div class="form-group accordion" id="accordionRaces">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingRaces">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseRaces" aria-expanded="true" aria-controls="collapseOne">
                            Races
                        </button>
                    </h2>
                    <div id="collapseRaces" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <input asp-for="AvailableRaces" type="hidden" value="@Model.AvailableRaces" />
                            <select asp-for="RaceId" onchange="updateRaceDescription()">
                                @foreach(Race race in Model.AvailableRaces)
                                {
                                    <option value=@race.RaceId>@race.Name (@race.Sourcebook)</option>
                                }
                            </select>
                            <p id="descriptionRace">@Model.AvailableRaces[Model.RaceId].Description</p>
                        </div>
                    </div>
                </div>
            </div>

            @* Accordion for Stat entry *@
            <div class="form-group accordion" id="accordionStats">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingStats">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseStats" aria-expanded="true" aria-controls="collapseOne">
                            Ability Scores
                        </button>
                    </h2>
                    <div id="collapseStats" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <div class="row ">
                                <div class="col">
                                <label asp-for="Strength" class="control-label"></label>
                                <input asp-for="Strength" class="form-control" value="8"/>
                                <span asp-validation-for="Strength" class="text-danger"></span><br />
                                </div>

                                <div class="col">
                                <label asp-for="Dexterity" class="control-label"></label>
                                <input asp-for="Dexterity" class="form-control" value="8"/>
                                <span asp-validation-for="Dexterity" class="text-danger"></span><br />
                                </div>

                                <div class="col">
                                <label asp-for="Constitution" class="control-label"></label>
                                <input asp-for="Constitution" class="form-control" value="8"/>
                                <span asp-validation-for="Constitution" class="text-danger"></span><br />
                                </div>

                                <div class="col">
                                <label asp-for="Intelligence" class="control-label"></label>
                                <input asp-for="Intelligence" class="form-control" value="8"/>
                                <span asp-validation-for="Intelligence" class="text-danger"></span><br />
                                </div>

                                <div class="col">
                                <label asp-for="Wisdom" class="control-label"></label>
                                <input asp-for="Wisdom" class="form-control" value="8"/>
                                <span asp-validation-for="Wisdom" class="text-danger"></span><br />
                                </div>

                                <div class="col">
                                <label asp-for="Charisma" class="control-label"></label>
                                <input asp-for="Charisma" class="form-control" value="8"/>
                                <span asp-validation-for="Charisma" class="text-danger"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script type="text/javascript">
        var numClasses = 1;
        function addClassSelector() {
            if(numClasses < Model.availableClasses.length - 1) {
                numClasses++;
                var classDiv = document.getElementById("Class" + (numClasses - 1));
                classDiv.hidden = false;
                /*
                var selectClasses = document.getElementById("selectClasses");

                selectClasses.appendChild(document.createElement("br"));

                var levelLabel = document.createElement("label");
                levelLabel.setAttribute("for", "class" + numClasses + "Level");
                levelLabel.innerHTML = "Level";
                selectClasses.appendChild(levelLabel);

                var levelInput = document.createElement("input");
                levelInput.setAttribute("asp-for", "ClassLevel");
                levelInput.setAttribute("id", "class" + numClasses + "Level");
                levelInput.setAttribute("name", "ClassLevel");
                levelInput.setAttribute("class", "w-auto");
                levelInput.setAttribute("type", "number");
                levelInput.setAttribute("min", "0");
                levelInput.setAttribute("max", "20");
                levelInput.setAttribute("value", "1");
                selectClasses.appendChild(levelInput);

                var newSelect = document.createElement("select");
                newSelect.setAttribute("id", "class" + numClasses + "Id");
                newSelect.setAttribute("name", "ClassId");
                for (var i = 0; i < Model.availableClasses.length; i++) {
                    var newOption = document.createElement("option");
                    newOption.setAttribute("value", Model.availableClasses[i].classId);
                    newOption.innerHTML = Model.availableClasses[i].name;
                    newSelect.appendChild(newOption);
                }
                selectClasses.appendChild(newSelect);
                */
            }
        }
        function updateBackgroundDescription() {
            var backgroundSelector = document.getElementById("BackgroundId");
            var backgroundId = parseInt(backgroundSelector.value);
            for (var i = 0; i < Model.availableBackgrounds.length; i++) {
                if (Model.availableBackgrounds[i].backgroundId == backgroundId) {
                    document.getElementById("descriptionBackground").innerHTML = Model.availableBackgrounds[i].description;
                    break;
                }
            }
        }
        function updateRaceDescription() {
            var raceSelector = document.getElementById("RaceId");
            var raceId = parseInt(raceSelector.value);
            for (var i = 0; i < Model.availableRaces.length; i++) {
                if (Model.availableRaces[i].raceId == raceId) {
                    document.getElementById("descriptionRace").innerHTML = Model.availableRaces[i].description;
                    break;
                }
            }
        }
        /*
        function submitForm() {
            Model.name = document.getElementById("Name").value;
            Model.classId = parseInt(document.getElementById("ClassId").value);
            Model.backgroundId = parseInt(document.getElementById("BackgroundId").value);
            Model.raceId = parseInt(document.getElementById("RaceId").value);
            Model.strength = parseInt(document.getElementById("Strength").value);
            Model.dexterity = parseInt(document.getElementById("Dexterity").value);
            Model.constitution = parseInt(document.getElementById("Constitution").value);
            Model.intelligence = parseInt(document.getElementById("Intelligence").value);
            Model.wisdom = parseInt(document.getElementById("Wisdom").value);
            Model.charisma = parseInt(document.getElementById("Charisma").value);
            var characterJson = "test";
            $.ajax({
                type: 'POST',
                url: '@Url.Action("Create")',
                data: characterJson,
                dataType: 'text',
                success: function () {
                    alert("Success");
                },
                error: function () {
                    alert(JSON.stringify(Model));
                }
            })
        }
        */
        const Model = @Html.Raw(Json.Serialize(Model));
    </script>
}
