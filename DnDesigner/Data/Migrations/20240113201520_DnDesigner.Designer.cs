// <auto-generated />
using System;
using DnDesigner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DnDesigner.Migrations
{
    [DbContext(typeof(DnDesignerDbContext))]
    [Migration("20240113201520_DnDesigner")]
    partial class DnDesigner
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CharacterSpellcastingSpell", b =>
                {
                    b.Property<int>("PreparedSpellsSpellId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterSpellcastingCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterSpellcastingSpellcastingId")
                        .HasColumnType("int");

                    b.HasKey("PreparedSpellsSpellId", "CharacterSpellcastingCharacterId", "CharacterSpellcastingSpellcastingId");

                    b.HasIndex("CharacterSpellcastingCharacterId", "CharacterSpellcastingSpellcastingId");

                    b.ToTable("CharacterSpellcastingSpell");
                });

            modelBuilder.Entity("DnDesigner.Models.Action", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionId"));

                    b.Property<string>("ActionTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttackBonusCalculation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Damage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DamageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Range")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SaveAttribute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SaveDCCalculation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActionId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("DnDesigner.Models.Background", b =>
                {
                    b.Property<int>("BackgroundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BackgroundId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sourcebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StarterGold")
                        .HasColumnType("int");

                    b.HasKey("BackgroundId");

                    b.ToTable("Backgrounds");
                });

            modelBuilder.Entity("DnDesigner.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterId"));

                    b.Property<string>("Alignment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AvailableHitDice")
                        .HasColumnType("int");

                    b.Property<int>("BackgroundId")
                        .HasColumnType("int");

                    b.Property<int>("Charisma")
                        .HasColumnType("int");

                    b.Property<int>("Constitution")
                        .HasColumnType("int");

                    b.Property<int>("CurrentHealth")
                        .HasColumnType("int");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<string>("Immunities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<string>("Resistances")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("TempHealth")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vulnerabilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WalkingSpeed")
                        .HasColumnType("int");

                    b.Property<int>("Wisdom")
                        .HasColumnType("int");

                    b.HasKey("CharacterId");

                    b.HasIndex("BackgroundId");

                    b.HasIndex("RaceId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("DnDesigner.Models.CharacterAction", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "ActionId");

                    b.HasIndex("ActionId");

                    b.ToTable("CharacterActions");
                });

            modelBuilder.Entity("DnDesigner.Models.CharacterClass", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<bool>("InitialClass")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("SubclassId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "ClassId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SubclassId");

                    b.ToTable("CharacterClasses");
                });

            modelBuilder.Entity("DnDesigner.Models.CharacterEffect", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("EffectId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("bit");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "EffectId");

                    b.HasIndex("EffectId");

                    b.ToTable("CharacterEffects");
                });

            modelBuilder.Entity("DnDesigner.Models.CharacterFeature", b =>
                {
                    b.Property<int>("CharacterFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterFeatureId"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.HasKey("CharacterFeatureId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("FeatureId");

                    b.ToTable("CharacterFeatures");
                });

            modelBuilder.Entity("DnDesigner.Models.CharacterProficiency", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("ProficiencyId")
                        .HasColumnType("int");

                    b.Property<int>("CheckBonus")
                        .HasColumnType("int");

                    b.Property<int>("ProficiencyLevel")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "ProficiencyId");

                    b.HasIndex("ProficiencyId");

                    b.ToTable("CharacterProficiencies");
                });

            modelBuilder.Entity("DnDesigner.Models.CharacterSpellcasting", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("SpellcastingId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "SpellcastingId");

                    b.HasIndex("SpellcastingId");

                    b.ToTable("CharacterSpellcasting");
                });

            modelBuilder.Entity("DnDesigner.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<int>("HitDie")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sourcebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpellcastingId")
                        .HasColumnType("int");

                    b.Property<int>("SubclassLevel")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("SpellcastingId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("DnDesigner.Models.Effect", b =>
                {
                    b.Property<int>("EffectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EffectId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EffectChoiceEffectId")
                        .HasColumnType("int");

                    b.Property<int?>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("EffectId");

                    b.HasIndex("EffectChoiceEffectId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("ItemId");

                    b.ToTable("Effects");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Effect");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DnDesigner.Models.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeatureId");

                    b.ToTable("Features");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Feature");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DnDesigner.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Copper")
                        .HasColumnType("int");

                    b.Property<int>("Electrum")
                        .HasColumnType("int");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<int>("MaxAttunedItems")
                        .HasColumnType("int");

                    b.Property<int>("Platinum")
                        .HasColumnType("int");

                    b.Property<int>("Silver")
                        .HasColumnType("int");

                    b.HasKey("InventoryId");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("DnDesigner.Models.InventoryItem", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("Attuned")
                        .HasColumnType("bit");

                    b.Property<int>("EquippedIn")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("DnDesigner.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<bool>("Attuneable")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Equipable")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<string>("Sourcebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Traits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("ItemId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("DnDesigner.Models.Proficiency", b =>
                {
                    b.Property<int>("ProficiencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProficiencyId"));

                    b.Property<string>("MainAttribute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProficiencyId");

                    b.ToTable("Proficiencies");
                });

            modelBuilder.Entity("DnDesigner.Models.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RaceId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sourcebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.Property<string>("StatBonuses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RaceId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("DnDesigner.Models.Spell", b =>
                {
                    b.Property<int>("SpellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpellId"));

                    b.Property<string>("CastingTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Components")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRitual")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Range")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresConcentration")
                        .HasColumnType("bit");

                    b.Property<string>("Sourcebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpellLevel")
                        .HasColumnType("int");

                    b.Property<string>("SpellSchool")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpellId");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("DnDesigner.Models.Spellcasting", b =>
                {
                    b.Property<int>("SpellcastingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpellcastingId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PreparedCasting")
                        .HasColumnType("bit");

                    b.Property<bool>("RitualCasting")
                        .HasColumnType("bit");

                    b.Property<bool>("Spellbook")
                        .HasColumnType("bit");

                    b.Property<string>("SpellcastingAttribute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpellcastingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpellcastingId");

                    b.ToTable("Spellcasting");
                });

            modelBuilder.Entity("DnDesigner.Models.Subclass", b =>
                {
                    b.Property<int>("SubclassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubclassId"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sourcebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpellcastingId")
                        .HasColumnType("int");

                    b.HasKey("SubclassId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SpellcastingId");

                    b.ToTable("Subclasses");
                });

            modelBuilder.Entity("GrantProficienciesProficiency", b =>
                {
                    b.Property<int>("GrantProficienciesEffectId")
                        .HasColumnType("int");

                    b.Property<int>("ProficienciesProficiencyId")
                        .HasColumnType("int");

                    b.HasKey("GrantProficienciesEffectId", "ProficienciesProficiencyId");

                    b.HasIndex("ProficienciesProficiencyId");

                    b.ToTable("GrantProficienciesProficiency");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SpellSpellcasting", b =>
                {
                    b.Property<int>("LearnableSpellsSpellId")
                        .HasColumnType("int");

                    b.Property<int>("LearnedBySpellcastingId")
                        .HasColumnType("int");

                    b.HasKey("LearnableSpellsSpellId", "LearnedBySpellcastingId");

                    b.HasIndex("LearnedBySpellcastingId");

                    b.ToTable("SpellSpellcasting");
                });

            modelBuilder.Entity("DnDesigner.Models.EffectChoice", b =>
                {
                    b.HasBaseType("DnDesigner.Models.Effect");

                    b.HasDiscriminator().HasValue("EffectChoice");
                });

            modelBuilder.Entity("DnDesigner.Models.GrantAction", b =>
                {
                    b.HasBaseType("DnDesigner.Models.Effect");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.HasIndex("ActionId");

                    b.HasDiscriminator().HasValue("GrantAction");
                });

            modelBuilder.Entity("DnDesigner.Models.GrantProficiencies", b =>
                {
                    b.HasBaseType("DnDesigner.Models.Effect");

                    b.Property<bool>("Expertise")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("GrantProficiencies");
                });

            modelBuilder.Entity("DnDesigner.Models.ModifyAttribute", b =>
                {
                    b.HasBaseType("DnDesigner.Models.Effect");

                    b.Property<string>("Attribute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ModifyAttribute");
                });

            modelBuilder.Entity("DnDesigner.Models.BackgroundFeature", b =>
                {
                    b.HasBaseType("DnDesigner.Models.Feature");

                    b.Property<int>("BackgroundId")
                        .HasColumnType("int");

                    b.HasIndex("BackgroundId");

                    b.HasDiscriminator().HasValue("BackgroundFeature");
                });

            modelBuilder.Entity("DnDesigner.Models.ClassFeature", b =>
                {
                    b.HasBaseType("DnDesigner.Models.Feature");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<bool>("InitialClassOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("MulticlassOnly")
                        .HasColumnType("bit");

                    b.HasIndex("ClassId");

                    b.HasDiscriminator().HasValue("ClassFeature");
                });

            modelBuilder.Entity("DnDesigner.Models.Feat", b =>
                {
                    b.HasBaseType("DnDesigner.Models.Feature");

                    b.Property<string>("Prerequisites")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Repeatable")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Feat");
                });

            modelBuilder.Entity("DnDesigner.Models.RaceFeature", b =>
                {
                    b.HasBaseType("DnDesigner.Models.Feature");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.HasIndex("RaceId");

                    b.HasDiscriminator().HasValue("RaceFeature");
                });

            modelBuilder.Entity("DnDesigner.Models.SubclassFeature", b =>
                {
                    b.HasBaseType("DnDesigner.Models.Feature");

                    b.Property<int>("SubclassId")
                        .HasColumnType("int");

                    b.HasIndex("SubclassId");

                    b.HasDiscriminator().HasValue("SubclassFeature");
                });

            modelBuilder.Entity("CharacterSpellcastingSpell", b =>
                {
                    b.HasOne("DnDesigner.Models.Spell", null)
                        .WithMany()
                        .HasForeignKey("PreparedSpellsSpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDesigner.Models.CharacterSpellcasting", null)
                        .WithMany()
                        .HasForeignKey("CharacterSpellcastingCharacterId", "CharacterSpellcastingSpellcastingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDesigner.Models.Character", b =>
                {
                    b.HasOne("DnDesigner.Models.Background", "Background")
                        .WithMany()
                        .HasForeignKey("BackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDesigner.Models.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Background");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("DnDesigner.Models.CharacterAction", b =>
                {
                    b.HasOne("DnDesigner.Models.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDesigner.Models.Character", "Character")
                        .WithMany("Actions")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DnDesigner.Models.CharacterClass", b =>
                {
                    b.HasOne("DnDesigner.Models.Character", "Character")
                        .WithMany("Classes")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDesigner.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDesigner.Models.Subclass", "Subclass")
                        .WithMany()
                        .HasForeignKey("SubclassId");

                    b.Navigation("Character");

                    b.Navigation("Class");

                    b.Navigation("Subclass");
                });

            modelBuilder.Entity("DnDesigner.Models.CharacterEffect", b =>
                {
                    b.HasOne("DnDesigner.Models.Character", "Character")
                        .WithMany("CharacterEffects")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDesigner.Models.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("DnDesigner.Models.CharacterFeature", b =>
                {
                    b.HasOne("DnDesigner.Models.Character", "Character")
                        .WithMany("Features")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDesigner.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("DnDesigner.Models.CharacterProficiency", b =>
                {
                    b.HasOne("DnDesigner.Models.Character", "Character")
                        .WithMany("Proficiencies")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDesigner.Models.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("DnDesigner.Models.CharacterSpellcasting", b =>
                {
                    b.HasOne("DnDesigner.Models.Character", "Character")
                        .WithMany("Spellcasting")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDesigner.Models.Spellcasting", "Spellcasting")
                        .WithMany()
                        .HasForeignKey("SpellcastingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Spellcasting");
                });

            modelBuilder.Entity("DnDesigner.Models.Class", b =>
                {
                    b.HasOne("DnDesigner.Models.Spellcasting", "Spellcasting")
                        .WithMany()
                        .HasForeignKey("SpellcastingId");

                    b.Navigation("Spellcasting");
                });

            modelBuilder.Entity("DnDesigner.Models.Effect", b =>
                {
                    b.HasOne("DnDesigner.Models.EffectChoice", null)
                        .WithMany("Effects")
                        .HasForeignKey("EffectChoiceEffectId");

                    b.HasOne("DnDesigner.Models.Feature", null)
                        .WithMany("Effects")
                        .HasForeignKey("FeatureId");

                    b.HasOne("DnDesigner.Models.Item", null)
                        .WithMany("Effects")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("DnDesigner.Models.Inventory", b =>
                {
                    b.HasOne("DnDesigner.Models.Character", "Character")
                        .WithOne("Inventory")
                        .HasForeignKey("DnDesigner.Models.Inventory", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DnDesigner.Models.InventoryItem", b =>
                {
                    b.HasOne("DnDesigner.Models.Inventory", "Inventory")
                        .WithMany("Items")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDesigner.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DnDesigner.Models.Subclass", b =>
                {
                    b.HasOne("DnDesigner.Models.Class", "Class")
                        .WithMany("Subclasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDesigner.Models.Spellcasting", "Spellcasting")
                        .WithMany()
                        .HasForeignKey("SpellcastingId");

                    b.Navigation("Class");

                    b.Navigation("Spellcasting");
                });

            modelBuilder.Entity("GrantProficienciesProficiency", b =>
                {
                    b.HasOne("DnDesigner.Models.GrantProficiencies", null)
                        .WithMany()
                        .HasForeignKey("GrantProficienciesEffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDesigner.Models.Proficiency", null)
                        .WithMany()
                        .HasForeignKey("ProficienciesProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpellSpellcasting", b =>
                {
                    b.HasOne("DnDesigner.Models.Spell", null)
                        .WithMany()
                        .HasForeignKey("LearnableSpellsSpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDesigner.Models.Spellcasting", null)
                        .WithMany()
                        .HasForeignKey("LearnedBySpellcastingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDesigner.Models.GrantAction", b =>
                {
                    b.HasOne("DnDesigner.Models.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");
                });

            modelBuilder.Entity("DnDesigner.Models.BackgroundFeature", b =>
                {
                    b.HasOne("DnDesigner.Models.Background", "Background")
                        .WithMany("Features")
                        .HasForeignKey("BackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Background");
                });

            modelBuilder.Entity("DnDesigner.Models.ClassFeature", b =>
                {
                    b.HasOne("DnDesigner.Models.Class", "Class")
                        .WithMany("Features")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("DnDesigner.Models.RaceFeature", b =>
                {
                    b.HasOne("DnDesigner.Models.Race", "Race")
                        .WithMany("Features")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("DnDesigner.Models.SubclassFeature", b =>
                {
                    b.HasOne("DnDesigner.Models.Subclass", "Subclass")
                        .WithMany("Features")
                        .HasForeignKey("SubclassId")
                        .IsRequired();

                    b.Navigation("Subclass");
                });

            modelBuilder.Entity("DnDesigner.Models.Background", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("DnDesigner.Models.Character", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("CharacterEffects");

                    b.Navigation("Classes");

                    b.Navigation("Features");

                    b.Navigation("Inventory")
                        .IsRequired();

                    b.Navigation("Proficiencies");

                    b.Navigation("Spellcasting");
                });

            modelBuilder.Entity("DnDesigner.Models.Class", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Subclasses");
                });

            modelBuilder.Entity("DnDesigner.Models.Feature", b =>
                {
                    b.Navigation("Effects");
                });

            modelBuilder.Entity("DnDesigner.Models.Inventory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("DnDesigner.Models.Item", b =>
                {
                    b.Navigation("Effects");
                });

            modelBuilder.Entity("DnDesigner.Models.Race", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("DnDesigner.Models.Subclass", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("DnDesigner.Models.EffectChoice", b =>
                {
                    b.Navigation("Effects");
                });
#pragma warning restore 612, 618
        }
    }
}
